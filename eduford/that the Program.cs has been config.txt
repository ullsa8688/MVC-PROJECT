 that the Program.cs has been configured,the next step that we have is toactually create the database and the table.When you are using Entity Framework Code First, thereare migrations that you have to run using EntityFramework to push the changes to database.It is not as complex as it sounds.We have done all the setup that isneeded. In order to run the migration,you will go to Tools, NuGet Package Manager, andthis time you will select the Package Manager Console.The first thing that you have to dois you have to add a migration.Migration is basically keeping a track ofall the DB changes that are needed.And once that migration is created, youpush that migration to the database.To actually create the database or makechanges to your table. Let's see what that is.The command to add a migration is add-migration.And then we have to give our migration a meaningful name.Do not use any spaces, when you are writing the name.The name that I want to give to our migration is AddCategoryToDatabase.Let's hit the Add button and we see an error message.The error is because when you run add-migration,you have to add a NuGet Package.You see the term add-migration is not recognized.I want you guys to copy this error and try tofind out what is the package that is missing from Google.I can give you the answer directly, butI want you guys to Google what package is required based on this error message.If you just copy that error and paste it here, you will see the very first and if you scroll down, you will see the package name. It is so simple. Just install Microsoft.EntityFrameworkCore.Tools.That is the package that is required to enable migrations in your project.Whenever you face any error, it is best to just Google that error. That way you can find the solution much easily and much quicker.So let's go to our project, Manage NuGet Packages.We will paste the package name and we will install the same version that we have in our project.Perfect. That is done, we can close this.I can open up the Package Manager Console again and I will run the same command one more time.This time it should complete successfully.And if you notice on the right hand side here,a new folder with the name of Migrations is created,and there are two files that got added.Our migration file is the first one and that is opened up on the screen as well.Inside migrations, we have two methods.One is Up and one is Down.The Up method is what needs to happen inside the migration.And Down is if something goes down,we need to roll back the changes.So do not worry about the Down right now.Let's see what's happening inside the Up method.On the migration Builder we have a method with the name of Create Table and it is creating the table with the name of Categories.That is the exact name that we defined right here.So it will create a table with the name of Category and then that will have columns.The first column will be the Id column which will be of the type integer, and nullable is false.Since we said it is a key column,it is automatically making that an identity columnand incrementing that by one every time.Pretty smart, right. The next thing is the Name columnand you can see the nullable is false here.If you did not add the Required property, then nullable would be true.You will see that Display Order is also nullable false,but we did not add that inside Category,and the reason behind that is it is an integer property and not a string.That is why nullable is false because it's an integer.Last we have the CreatedDateTime of the type DateTime too and that looks good.If you see on the constraints, it is also adding a PrimaryKey on the Id column with a Name.So migrations is exactly what we wanted.But can we take a look at the SQL that gets executed? No.What Entity Framework Core does is, based on this migrations,it will create an optimized version of the SQL query and it will automatically run that on the database.You do not have to do anything with that.What you work with is just the models.You create a migration and you push that to the database.So once you verify that migration is looking good,you can just run the command update-database and that will push the migrations to database.We have an error here, let me go to app settings and of course we do.This will not be colon, this will be equal to right here,and they are separated by a semicolon. That was my bad.We will go back to the Package Manager and you can also see the error said, server and colon was not supported because it should be equal to.Let's update the database one more time. Perfect.The migrations were completed. But what actually happened is first it will connect to the server.It will check is there a database with the name of Bulky,there won't be anything right now.So it will create that database first and then the migrations here, it will convert them to SQL and execute them on our database.So if we go back now, if we refresh the database,you will see the new database with the name of Bulky.And if you open the tables, there will be two tables.Let's examine the columns inside the Categories table.It should have four columns and that looks great.Now what is inside the EFMigrations?If you do the Select Top 1000, Entity Framework Core keeps a track of which migrations have been applied.So next time when you run the update database, it will not apply the same migration,it will only apply the migrations that have not been applied on this database.Entity Framework Core is pretty smart with all the configuration and tracking that it needs to do.So with that, using Entity Framework Core, we have created our database and we have added our table based on the model inside our main project.So with that, let me continue in the next video.